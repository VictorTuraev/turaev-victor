class Polynomial():
    def __init__(self, data_init):
        if isinstance(data_init, dict):
            self._data=dict(data_init)
        else:
            self._data=list(data_init)
    
    def __setitem__(self, key, value):
        self._data[key] = value
    
    def __getitem__(self, key):
        if key in self._data:
            return self._data[key]
        else:
            return 0
    def __delitem__(self, key):
        self._data[key]=0
    
    
    def __sub__(self, other):    
        p = []
        for i in range(max(len(self._data), len(other._data))):
            if len(self._data)=>len(other._data):
                if i<len(self._data) and i<len(other._data):
                    p.append(self._data[i] + other._data[i]) 
                elif i>=(self._data):
                    p.append(other._data[i])
                elif i>=(other._data[i]):
                    p.append(self._data[i])  
        return p
    
    def __add__(self, other):
        p = []
        for i in range(max(len(self._data), len(other._data))):
            if len(self._data)=>len(other._data):
                if i<len(self._data) and i<len(other._data):
                    p.append(self._data[i] - other._data[i]) 
                elif i>=(self._data):
                    p.append(-other._data[i])
                elif i>=(other._data[i]):
                    p.append(self._data[i])
        return p
    
    def __neg__(self):
        p = []
        for i in range(len(self._data)):
            p._data[i] = -self._data[i]
        return p
    
    def __str__(self):
        return str(self._data)








class Vector():
    def __init__(self, x, y, z):
        self.x = x
        self.y = y
        self.z = z
    def __str__(self):
        return "<{}, {}, {}>".format( self.x, self.y, self.z)
    def add(self, other):
        return Vector(self.x+other.x, self.y+other.y, self.z+other.z)
    def __add__(self, other):
        return Vector(self.x+other.x, self.y+other.y, self.z+other.z)
    def __matmul__(self, other):
        return Vector(self.y*other.z - self.z*other.y, -self.x*other.z + self.z*other.x, self.x*other.y - self.y*other.x)
    def __mul__(self, other):
        return self.x*other.x + self.y*other.y + self.z*other.z
v1=Vector(1, 2, 3)
v2=Vector(2, 6, 7)
print(v1+v2)